# dot.bashrc
#
# sourced on interactive/TTY
# sourced on login shells via .bash_profile
# symlinked to ~/.bashrc
#

source "${HOME}/.dotfiles/shell/vars.sh"

# Source the dotfiles (order matters)
source "${SHELL_DOTFILES}/functions.sh"
source "${SHELL_DOTFILES}/path.sh"
source "${SHELL_DOTFILES}/alias.sh"

# Options
shopt -s nocaseglob # Case-insensitive globbing (used in pathname expansion)
shopt -s histappend # Append to the Bash history file, rather than overwriting it
shopt -s cdspell # Autocorrect typos in path names when using `cd`
shopt -s dotglob # expand filenames starting with dots too

# https://github.com/mroth/scmpuff
eval "$(scmpuff init -s --aliases=false)"

# Plugins
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
[ -f ~/.fzf.bash ] && source ~/.fzf.bash

# Enable some Bash 4 features when possible:
# * `autocd`, e.g. `**/qux` will enter `./foo/bar/baz/qux`
# * Recursive globbing, e.g. `echo **/*.txt`
for option in autocd globstar; do
	shopt -s "$option" 2> /dev/null
done

# completion
if [ -f /etc/bash_completion ]; then
  . /etc/bash_completion
fi

# Enable tab completion for `g` by marking it as an alias for `git`
if [ -f ~/.git-completion.bash ]; then
  . ~/.git-completion.bash
  __git_complete g _git # http://stackoverflow.com/a/10707579
fi


if [[ -a ~/.localrc ]]; then
    source ~/.localrc
fi

##############################################################################
# 04. PROMPT COLORS                                                          #
##############################################################################

# Clean and minimalistic Bash prompt
# 
# copied from https://github.com/sapegin/dotfiles/blob/dd063f9c30de7d2234e8accdb5272a5cc0a3388b/includes/bash_prompt.bash
#
# Notes:
# - $local_username - username you don’t want to see in the prompt - can be defined in ~/.bashlocal : `local_username="admin"`

# https://askubuntu.com/questions/591937/no-value-for-term-and-no-t-specified
if [[ $- == *i* ]]; then 

  # Colors
  RED="$(tput setaf 1)"
  GREEN="$(tput setaf 2)"
  YELLOW="$(tput setaf 3)"
  BLUE="$(tput setaf 4)"
  MAGENTA="$(tput setaf 5)"
  CYAN="$(tput setaf 6)"
  WHITE="$(tput setaf 7)"
  GRAY="$(tput setaf 8)"
  BOLD="$(tput bold)"
  UNDERLINE="$(tput sgr 0 1)"
  INVERT="$(tput sgr 1 0)"
  NOCOLOR="$(tput sgr0)"

  # User color
  case $(id -u) in
    0) user_color="$RED" ;;  # root
    *) user_color="$GREEN" ;;
  esac

  # Symbols
  prompt_symbol="❯"
  prompt_dirty_symbol="*"

  function prompt_command() {

    # Local or SSH session?
    local remote=
    [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ] && remote=1

    # Git branch name and work tree status (only when we are inside Git working tree)
    local git_prompt=
    if [[ "true" = "$(git rev-parse --is-inside-work-tree 2>/dev/null)" ]]; then
      # Branch name
      local branch="$(git symbolic-ref HEAD 2>/dev/null)"
      branch="${branch##refs/heads/}"

      # Working tree status (red when dirty)
      local dirty=
      # Modified files
      git diff --no-ext-diff --quiet --exit-code --ignore-submodules 2>/dev/null || dirty=1
      # Untracked files
      [ -z "$dirty" ] && test -n "$(git status --porcelain)" && dirty=1

      # Format Git info
      if [ -n "$dirty" ]; then
        git_prompt=" $GRAY$branch$prompt_dirty_symbol$NOCOLOR"
      else
        git_prompt=" $GRAY$branch$NOCOLOR"
      fi
    fi

    # Only show username if not default
    local user_prompt=
    [ "$USER" != "$local_username" ] && user_prompt="$user_color$USER$NOCOLOR"

    # Show hostname inside SSH session
    local host_prompt=
    [ -n "$remote" ] && host_prompt="@$YELLOW$HOSTNAME$NOCOLOR"

    # Show delimiter if user or host visible
    local login_delimiter=
    [ -n "$user_prompt" ] || [ -n "$host_prompt" ] && login_delimiter=":"

    # Format prompt
    first_line="$user_prompt$host_prompt$login_delimiter$WHITE\w$NOCOLOR$git_prompt"
    second_line="\`if [ \$? = 0 ]; then echo \[\$CYAN\]; else echo \[\$RED\]; fi\`\$prompt_symbol\[\$NOCOLOR\] "
    PS1="\n$first_line\n$second_line"

    # Multiline command
    PS2="\[$CYAN\]$prompt_symbol\[$NOCOLOR\] "

    # Terminal title
    local title="$(basename "$PWD")"
    [ -n "$remote" ] && title="$title \xE2\x80\x94 $HOSTNAME"
    echo -ne "\033]0;$title"; echo -ne "\007"
  }

  # Show awesome prompt only if Git is istalled
  command -v git >/dev/null 2>&1 && PROMPT_COMMAND=prompt_command

fi
