

"
"   ██╗   ██╗ ██╗ ███╗   ███╗ ██████╗   ██████╗
"   ██║   ██║ ██║ ████╗ ████║ ██╔══██╗ ██╔════╝
"   ██║   ██║ ██║ ██╔████╔██║ ██████╔╝ ██║
"   ╚██╗ ██╔╝ ██║ ██║╚██╔╝██║ ██╔══██╗ ██║
" ██╗╚████╔╝  ██║ ██║ ╚═╝ ██║ ██║  ██║ ╚██████╗
" ╚═╝ ╚═══╝   ╚═╝ ╚═╝     ╚═╝ ╚═╝  ╚═╝  ╚═════╝
"

let g:plugin_path = '~/.config/nvim/plugged'

call plug#begin(g:plugin_path)

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" PLUGINS
"""""""""""""""""""""""""""""""""""""""""""""""""""""

Plug 'tpope/vim-sensible'
Plug 'itchyny/lightline.vim'
Plug 'editorconfig/editorconfig-vim'
Plug 'ludovicchabant/vim-gutentags'
" Plug 'mhinz/vim-startify'
" Plug 'blueyed/vim-diminactive'

" =================================================
" Plug: Completion
" =================================================

Plug 'ervandew/supertab'
if (has('nvim') && has('python3'))
  Plug 'neoclide/coc.nvim', {'branch': 'release'}
  Plug 'SirVer/ultisnips'
  Plug 'honza/vim-snippets'
endif

" =================================================
" Plug: File system
" =================================================

" Plug 'duggiefresh/vim-easydir'

" =================================================
" Plug: Commands
" =================================================

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
" Plug 'scrooloose/nerdtree', { 'on': ['NERDTreeToggle', 'NERDTreeFind'] }
Plug 'cocopon/vaffle.vim'
" Plug 'osyo-manga/vim-over'
Plug 'Yggdroot/indentLine'
" Plug 'kassio/neoterm'
" Plug 'tpope/vim-unimpaired'
" Plug 'AndrewRadev/splitjoin.vim'
Plug 'tyewang/vimux-jest-test'
" Plug 'metakirby5/codi.vim'
" Plug 'terryma/vim-expand-region'
Plug 'mattn/gist-vim'
      \| Plug 'mattn/webapi-vim'
Plug 'svermeulen/vim-cutlass'

" =================================================
" Plug: Input, syntax, spacing
" =================================================

Plug 'myusuf3/numbers.vim'
Plug 'w0rp/ale'
" Plug 'justinmk/vim-sneak'
Plug 'jiangmiao/auto-pairs'
Plug 'Valloric/MatchTagAlways'
Plug 'simeji/winresizer'
Plug 'christoomey/vim-tmux-navigator'
Plug 'benmills/vimux'

" =================================================
" Plug: Editing keys
" =================================================

Plug 'tpope/vim-surround'
Plug 'scrooloose/nerdcommenter'
Plug 'tpope/vim-repeat'
      " \| Plug 'svermeulen/vim-easyclip'
Plug 'alvan/vim-closetag'
Plug 'svermeulen/vim-yoink'
Plug 'svermeulen/vim-subversive'

" =================================================
" Plug: Colorscheme
" =================================================

" Plug 'morhetz/gruvbox'
" Plug 'chriskempson/base16-vim'
" Plug 'icymind/NeoSolarized'
" Plug 'arcticicestudio/nord-vim'
Plug 'mhartington/oceanic-next'
Plug 'sonph/onehalf', { 'rtp': 'vim/' }

" =================================================
" Plug: Language
" =================================================

Plug 'autozimu/LanguageClient-neovim', {
      \ 'branch': 'next',
      \ 'do': 'bash install.sh',
      \ }

" =================================================
" Language: ReasonML
" =================================================

Plug 'reasonml-editor/vim-reason-plus'

" =================================================
" Language: Git
" =================================================

" Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
Plug 'rhysd/committia.vim'

" =================================================
" Language: JavaScript and derivatives, JSON
" =================================================

Plug 'sheerun/vim-polyglot'
Plug 'moll/vim-node'
Plug 'epilande/vim-es2015-snippets'
Plug 'epilande/vim-react-snippets'

" =================================================
" Language: Stylesheets
" =================================================

Plug 'JulesWang/css.vim'
      \| Plug 'hail2u/vim-css3-syntax'
      \| Plug 'cakebaker/scss-syntax.vim', { 'for': ['scss'] }
Plug 'ap/vim-css-color'
Plug 'othree/csscomplete.vim'

call plug#end()

" Shortcut for checking if a plugin is loaded
function! s:has_plugin(plugin)
  let lookup = 'g:plugs["' . a:plugin . '"]'
  return exists(lookup)
endfunction

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" GENERAL SETTINGS
"""""""""""""""""""""""""""""""""""""""""""""""""""""

set number "Show relative lines numbers
set showmatch " Show matching of: () [] {}
set mousehide "Hide mouse when typing
set mouse=a "Enable Mouse clicking
set showmode " Show the current mode
set hidden " Hide buffers, rather than close them
set cursorline " Highlight current line
set nostartofline " Don’t reset cursor to start of line when moving around.
set shortmess=atI " Don’t show the intro message when starting Vim
set visualbell " Use visual bell instead of audible bell
set backupcopy=yes "optimize webpack watch option
set clipboard+=unnamedplus
set ignorecase
set smartcase

" Whitespace
set nowrap " don't wrap lines
set tabstop=2 " Make tabs as wide as two spaces
set shiftwidth=2 " The # of spaces for indenting.
set expandtab " use spaces, not tabs (optional)

set conceallevel=2

" set <leader>
let mapleader=","

" Enable term 24 bit colour
set termguicolors

" Set colorscheme.
" set background=dark
colorscheme onehalfdark

" Add the g flag to search/replace by default
set gdefault

" Centralize backups, swapfiles and undo history
set backupdir=~/.config/nvim/backups
" set directory=.,$TEMP " Stop the swp file warning

if has("persistent_undo")
  set undodir=~/.config/nvim/undo
  set undofile
  set undolevels=1000
  set undoreload=10000
endif

" startup command only on empty and non-existing files
if @% == "" || filereadable(@%) == 0
  autocmd VimEnter * :Gist -l
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" KEY MAPPINGS
"""""""""""""""""""""""""""""""""""""""""""""""""""""

" esc mapping
:inoremap jk <esc>

" Clear search highlights
noremap <silent><Leader>/ :nohls<CR>

" Select all
map <Leader>a ggVG

" toogle background
map <Leader>bg :let &background = ( &background == "dark"? "light" : "dark" )<CR>

" Allow saving of files as sudo when I forgot to start vim using sudo.
cmap w!! w !sudo tee > /dev/null %

" Maximize window and return to previous split structure
nmap t% :tabedit %<CR>
nmap td :tabclose<CR>

" support ejs 
au BufNewFile,BufRead *.ejs set filetype=html

" auto reload of vimrc
noremap <leader>r :source ~/.vimrc<CR>

" quick save
noremap <leader>s :update<CR>

" edit vimrc
nnoremap  <leader>evr :<C-U>edit ~/.vimrc<CR>

" Ag for word other cursor
nnoremap <silent> <Leader>ag :Ag <C-R><C-W><CR>

" format JSON
" map <leader>j !python -m json.tool<CR>
" command J :%!python -mjson.tool

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" PLUGIN SETTINGS
"""""""""""""""""""""""""""""""""""""""""""""""""""""

if s:has_plugin('ale')
  let g:ale_echo_msg_error_str = 'E'
  let g:ale_echo_msg_warning_str = 'W'
  let g:ale_echo_msg_format = '[%linter%] %s [%severity%] %code%'
  let g:ale_lint_on_text_changed = 'never'
  let g:ale_linters = {'typescript': ['tslint', 'tsserver', 'typecheck'], 'javascript': ['eslint', 'flow']}
  let g:ale_fixers = {'javascript': ['prettier'], 'typescript': ['prettier'], 'html': ['prettier'], 'json': ['prettier'], 'mdx': ['prettier']}
  let g:ale_javascript_prettier_use_local_config = 1

  nmap <silent><Leader>p <Plug>(ale_fix)
endif

if s:has_plugin('CamelCaseMotion')
  " camelCaseMotion settings
  map <silent> w <Plug>CamelCaseMotion_w
  map <silent> b <Plug>CamelCaseMotion_b
  map <silent> e <Plug>CamelCaseMotion_e
  map <silent> ge <Plug>CamelCaseMotion_ge
  sunmap w
  sunmap b
  sunmap e
  sunmap ge
endif

if s:has_plugin('fzf.vim')
  nnoremap <c-p> :Files<cr>
endif

if s:has_plugin('LanguageClient-neovim')
  " Required for operations modifying multiple buffers like rename.
  set hidden

  let g:LanguageClient_serverCommands = {
      \ 'reason': ['ocaml-language-server', '--stdio'],
      \ 'ocaml': ['ocaml-language-server', '--stdio'],
      \ 'javascript': ['javascript-typescript-stdio'],
      \ }

  " Automatically start language servers.
  let g:LanguageClient_autoStart = 1

  nnoremap <silent> gd :call LanguageClient_textDocument_definition()<cr>
  nnoremap <silent> gf :call LanguageClient_textDocument_formatting()<cr>
  nnoremap <silent> <cr> :call LanguageClient_textDocument_hover()<cr>
endif

if s:has_plugin('lightline.vim')
  set noshowmode
  let g:lightline = {
        \ 'mode_map': {
        \   'n': 'N',
        \   'i': 'I',
        \   'v': 'V'
        \ },
        \ 'colorscheme': 'onehalfdark',
        \ 'active': {
        \   'left': [ [ 'mode', 'paste' ],
        \             [ 'fugitive', 'readonly' ], [ 'relativepath' ] ],
        \   'right': [ [ 'lineinfo' ],
        \              [ 'percent' ],
        \              [ 'tags' ] ]
        \ },
        \ 'component_function': {
        \   'fugitive': 'LightLineFugitive',
        \   'readonly': 'LightLineReadonly',
        \   'modified': 'LightLineModified',
        \   'fileformat': 'LightlineFileformat',
        \   'filetype': 'LightlineFiletype',
        \   'fileencoding': 'LightlineFileencoding'
        \ },
        \ 'component_expand': {
        \   'tags': 'LightlineTags'
        \ },
        \ 'separator': { 'left': '', 'right': '' },
        \ 'subseparator': { 'left': '', 'right': '' }
        \ }

  function! LightlineFileformat()
    return winwidth(0) > 70 ? &fileformat : ''
  endfunction

  function! LightlineFiletype()
    return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
  endfunction

  function! LightlineFileencoding()
    return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
  endfunction

  function! LightLineModified()
    if &filetype == "help"
      return ""
    elseif &modified
      return "+"
    elseif &modifiable
      return ""
    else
      return ""
    endif
  endfunction

  function! LightLineReadonly()
    if &filetype == "help"
      return ""
    elseif &readonly
      return "RO"
    else
      return ""
    endif
  endfunction

  function! LightLineFugitive()
    if exists("*fugitive#head")
      let _ = fugitive#head()
      return strlen(_) ? '┣ '._ : ''
    endif
    return ''
  endfunction

  function LightlineTags()
      return '%{gutentags#statusline("[", "]")}'
  endfunction
endif

if s:has_plugin('neoterm')
  let g:neoterm_autoinsert = 1
endif

if s:has_plugin('nerdcommenter')
  let g:NERDSpaceDelims = 1
endif

if s:has_plugin('nerdtree')
  let NERDTreeShowHidden=1
  let NERDTreeQuitOnOpen=1
  noremap <leader>n :NERDTreeToggle<CR>
  noremap <leader>f :NERDTreeFind<CR>
endif

if s:has_plugin('vaffle.vim')
  noremap <leader>n :Vaffle<CR>
  set cmdheight=2

  function! s:customize_vaffle_mappings() abort
    nmap <buffer> S <Plug>(vaffle-open-selected-split)
    nmap <buffer> V <Plug>(vaffle-open-selected-vsplit)
  endfunction

  augroup vimrc_vaffle
    autocmd!
    autocmd FileType vaffle call s:customize_vaffle_mappings()
  augroup END
endif

" if s:has_plugin('vim-startify')
  " let g:startify_change_to_dir = 0
" endif

if s:has_plugin('supertab')
  let g:SuperTabDefaultCompletionType = "<c-n>"
endif

if s:has_plugin('ultisnips')
  let g:UltiSnipsExpandTrigger='<c-j>'
  let g:UltiSnipsJumpForwardTrigger='<c-j>'
  let g:UltiSnipsJumpBackwardTrigger='<c-k>'
endif

if s:has_plugin('vim-fugitive')
  set diffopt+=vertical
  nmap <leader>gb :Gblame<cr>
  nmap <leader>gs :Gstatus<cr>
  nmap <leader>gc :Gcommit -v<cr>
  nmap <leader>ga :Git add -p<cr>
  nmap <leader>gm :Gcommit --amend<cr>
  nmap <leader>gp :Gpush<cr>
  nmap <leader>gd :Gdiff<cr>
  nmap <leader>gw :Gwrite<cr>
endif

if s:has_plugin('vim-polyglot')
  let g:javascript_plugin_jsdoc = 1
  let g:javascript_plugin_flow = 1
  " let g:javascript_conceal_function       = "ƒ"
  " let g:javascript_conceal_null           = "ø"
  " let g:javascript_conceal_this           = "@"
  " let g:javascript_conceal_return         = "⇚"
  " let g:javascript_conceal_undefined      = "¿"
  " let g:javascript_conceal_NaN            = "ℕ"
  " let g:javascript_conceal_prototype      = "¶"
  " let g:javascript_conceal_static         = "•"
  " let g:javascript_conceal_super          = "Ω"
  " let g:javascript_conceal_arrow_function = "⇒"
  " set conceallevel=2
endif

if s:has_plugin('vim-unimpaired')
  nmap ( [
  nmap ) ]
  omap ( [
  omap ) ]
  xmap ( [
  xmap ) ]
endif

if s:has_plugin('vimux')
  " Prompt for a command to run
  map <Leader>vp :VimuxPromptCommand<CR>
  " Run last command executed by VimuxRunCommand
  map <Leader>vl :VimuxRunLastCommand<CR>
  " Inspect runner pane
  map <Leader>vi :VimuxInspectRunner<CR>
  " Zoom the tmux runner pane
  map <Leader>vz :VimuxZoomRunner<CR>
endif

if s:has_plugin('winresizer')
  let g:winresizer_start_key = '<C-T>'
endif

if s:has_plugin('nord-vim')
  let g:nord_comment_brightness = 20
endif

if s:has_plugin('oceanic-next')
  let g:oceanic_next_terminal_bold = 1
  let g:oceanic_next_terminal_italic = 1
endif

if s:has_plugin('vim-closetag')
  autocmd BufNewFile,BufRead *.jsx set filetype=javascript
  let g:closetag_emptyTags_caseSensitive = 1
  let g:closetag_filetypes = 'html,xhtml,phtml,javascript'
endif

if s:has_plugin('vim-cutlass')
  nnoremap x d
  xnoremap x d

  nnoremap xx dd
  nnoremap X D
endif

if s:has_plugin('indentLine')
  let g:indentLine_setConceal = 0
endif

if s:has_plugin('vim-gutentags')
  let g:gutentags_ctags_tagfile = '.git/tags'
endif

if s:has_plugin('vim-subversive')
  nmap s <plug>(SubversiveSubstitute)
  nmap ss <plug>(SubversiveSubstituteLine)
  nmap S <plug>(SubversiveSubstituteToEndOfLine)
endif

if s:has_plugin('vim-yoink')
  let g:yoinkIncludeDeleteOperations = 1
  nmap <c-n> <plug>(YoinkPostPasteSwapBack)
  nmap <expr>  <c-p> yoink#isSwapping() ? '<plug>(YoinkPostPasteSwapForward)' : ':Files<cr>'

  nmap p <plug>(YoinkPaste_p)
  nmap P <plug>(YoinkPaste_P)
endif

if s:has_plugin('coc.nvim')
  " coc extensions
  let g:coc_global_extensions = ['coc-tsserver']
endif
