

"
"   ██╗   ██╗ ██╗ ███╗   ███╗ ██████╗   ██████╗
"   ██║   ██║ ██║ ████╗ ████║ ██╔══██╗ ██╔════╝
"   ██║   ██║ ██║ ██╔████╔██║ ██████╔╝ ██║
"   ╚██╗ ██╔╝ ██║ ██║╚██╔╝██║ ██╔══██╗ ██║
" ██╗╚████╔╝  ██║ ██║ ╚═╝ ██║ ██║  ██║ ╚██████╗
" ╚═╝ ╚═══╝   ╚═╝ ╚═╝     ╚═╝ ╚═╝  ╚═╝  ╚═════╝
"

let g:plugin_path = '~/.config/nvim/plugged'

call plug#begin(g:plugin_path)

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" PLUGINS
"""""""""""""""""""""""""""""""""""""""""""""""""""""

Plug 'tpope/vim-sensible'
Plug 'itchyny/lightline.vim'
Plug 'editorconfig/editorconfig-vim'
Plug 'tmux-plugins/vim-tmux-focus-events'
Plug 'ervandew/supertab'
Plug '/home/linuxbrew/.linuxbrew/opt/fzf/'
Plug 'junegunn/fzf.vim'
Plug 'wincent/ferret'
Plug 'Yggdroot/indentLine'
" Plug 'tpope/vim-unimpaired'
Plug 'tyewang/vimux-jest-test'
Plug 'mattn/gist-vim'
      \| Plug 'mattn/webapi-vim'
Plug 'svermeulen/vim-cutlass'
Plug 'preservim/nerdtree'
Plug 'jeffkreeftmeijer/vim-numbertoggle'
Plug 'w0rp/ale'
Plug 'desmap/ale-sensible'
Plug 'jiangmiao/auto-pairs'
Plug 'Valloric/MatchTagAlways'
Plug 'simeji/winresizer'
Plug 'benmills/vimux'
Plug 'wincent/loupe'
Plug 'tpope/vim-surround'
Plug 'scrooloose/nerdcommenter'
Plug 'tpope/vim-repeat'
      " \| Plug 'svermeulen/vim-easyclip'
Plug 'alvan/vim-closetag'
Plug 'svermeulen/vim-yoink'
Plug 'svermeulen/vim-subversive'
Plug 'wincent/scalpel'
Plug 'junegunn/goyo.vim'
Plug 'gruvbox-community/gruvbox'
" Plug 'chriskempson/base16-vim'
" Plug 'icymind/NeoSolarized'
" Plug 'arcticicestudio/nord-vim'
Plug 'mhartington/oceanic-next'
Plug 'sonph/onehalf', { 'rtp': 'vim/' }
Plug 'reasonml-editor/vim-reason-plus'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
Plug 'rhysd/committia.vim'
Plug 'sheerun/vim-polyglot'
Plug 'moll/vim-node'
Plug 'epilande/vim-es2015-snippets'
Plug 'epilande/vim-react-snippets'
Plug 'JulesWang/css.vim'
      \| Plug 'hail2u/vim-css3-syntax'
      \| Plug 'cakebaker/scss-syntax.vim', { 'for': ['scss'] }
Plug 'ap/vim-css-color'
Plug 'othree/csscomplete.vim'
Plug 'autozimu/LanguageClient-neovim', {
    \ 'branch': 'next',
    \ 'do': 'bash install.sh',
    \ }
if (has('nvim') && has('python3'))
  Plug 'SirVer/ultisnips'
  Plug 'honza/vim-snippets'
endif

call plug#end()

" Shortcut for checking if a plugin is loaded
function! s:has_plugin(plugin)
  let lookup = 'g:plugs["' . a:plugin . '"]'
  return exists(lookup)
endfunction

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" GENERAL CONFIGURATIONS
"""""""""""""""""""""""""""""""""""""""""""""""""""""

set number "Show relative lines numbers
set showmatch " Show matching of: () [] {}
set mousehide "Hide mouse when typing
set mouse=a "Enable Mouse clicking
set showmode " Show the current mode
set cursorline " Highlight current line
set nostartofline " Don’t reset cursor to start of line when moving around.
set shortmess=atI " Don’t show the intro message when starting Vim
set visualbell " Use visual bell instead of audible bell
set backupcopy=yes "optimize webpack watch option
set clipboard+=unnamedplus
set ignorecase
set smartcase

" Whitespace
set nowrap " don't wrap lines
set tabstop=2 " Make tabs as wide as two spaces
set shiftwidth=2 " The # of spaces for indenting.
set expandtab " use spaces, not tabs (optional)

set conceallevel=2

" Enable term 24 bit colour
set termguicolors

" Set colorscheme.
" set background=dark
colorscheme onehalfdark

" Add the g flag to search/replace by default
set gdefault

" Centralize backups, swapfiles and undo history
set backupdir=~/.config/nvim/backups
" set directory=.,$TEMP " Stop the swp file warning

if has("persistent_undo")
  set undodir=~/.config/nvim/undo
  set undofile
  set undolevels=1000
  set undoreload=10000
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" FILETYPE-SPECIFIC CONFIGURATIONS
"""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" CUSTOM FUNCTIONS
"""""""""""""""""""""""""""""""""""""""""""""""""""""

function! LanguageClientMaps()
  if has_key(g:LanguageClient_serverCommands, &filetype)
    nnoremap <buffer> <silent> K :call LanguageClient#textDocument_hover()<cr>
    nnoremap <buffer> <silent> gd :call LanguageClient#textDocument_definition()<CR>

    nnoremap <leader>lc :call LanguageClient#textDocument_completion()<CR>
    nnoremap <leader>ld :call LanguageClient#textDocument_definition()<CR>
    nnoremap <leader>lf :call LanguageClient#textDocument_formatting()<CR>
    nnoremap <leader>lm :call LanguageClient_contextMenu()<CR>
    nnoremap <leader>lr :call LanguageClient#textDocument_rename()<CR>
    nnoremap <leader>ls :call LanguageClient_textDocument_documentSymbol()<CR>
    nnoremap <leader>lt :call LanguageClient#textDocument_typeDefinition()<CR>
    nnoremap <leader>lx :call LanguageClient#textDocument_references()<CR>
  endif
endfunction

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" CUSTOM MAPPINGS
"""""""""""""""""""""""""""""""""""""""""""""""""""""

" NORMAL
""""""""

" Avoid unintentional switches to Ex mode.
nnoremap Q <nop>

" Multi-mode mappings (Normal, Visual, Operating-pending modes).
noremap Y y$

" Move between windows.
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Store relative line number jumps in the jumplist if they exceed a threshold.
nnoremap <expr> k (v:count > 5 ? "m'" . v:count : '') . 'k'
nnoremap <expr> j (v:count > 5 ? "m'" . v:count : '') . 'j'

" Repurpose cursor keys (accessible near homerow via "SpaceFN" layout) for one
" of my most oft-use key sequences.
nnoremap <silent> <Up> :cprevious<CR>
nnoremap <silent> <Down> :cnext<CR>
nnoremap <silent> <Left> :cpfile<CR>
nnoremap <silent> <Right> :cnfile<CR>

nnoremap <silent> <S-Up> :lprevious<CR>
nnoremap <silent> <S-Down> :lnext<CR>
nnoremap <silent> <S-Left> :lpfile<CR>
nnoremap <silent> <S-Right> :lnfile<CR>

" Like vim-vinegar.
nnoremap <silent> - :silent edit <C-R>=empty(expand('%')) ? '.' : expand('%:p:h')<CR><CR>

" VISUAL
""""""""

" Move between windows.
xnoremap <C-h> <C-w>h
xnoremap <C-j> <C-w>j
xnoremap <C-k> <C-w>k
xnoremap <C-l> <C-w>l

" COMMAND
"""""""""

cnoremap <C-a> <Home>
cnoremap <C-e> <End>

" INSERT
""""""""

" esc mapping
:inoremap jk <esc>

" LEADER
""""""""

" set <leader>
let mapleader="\<Space>"

" <Leader><Leader> -- Open last buffer.
nnoremap <Leader><Leader> <C-^>

" close all windows but the active one
nnoremap <Leader>o :only<CR>

" <Leader>p -- Show the path of the current file (mnemonic: path; useful when
" you have a lot of splits and the status line gets truncated).
nnoremap <Leader>p :echo expand('%')<CR>

" Select all
" nnoremap <Leader>a ggVG

" auto reload of vimrc
noremap <leader>r :source ~/.vimrc<CR>

" quick save
nnoremap <Leader>w :write<CR>
nnoremap <Leader>x :exit<CR>
nnoremap <Leader>q :quit<CR>

" fzf mappings
nnoremap <silent><Leader>* :Ag <C-R><C-W><CR>
nnoremap <silent><Leader>/ :Ag <CR>
nnoremap <silent><Leader>t :Files<CR>
nnoremap <silent><Leader>b :Buffer<CR>

nnoremap <Leader>z :Goyo<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""
" PLUGIN SETTINGS
"""""""""""""""""""""""""""""""""""""""""""""""""""""

if s:has_plugin('ale')
  let g:ale_echo_msg_error_str = 'E'
  let g:ale_echo_msg_warning_str = 'W'
  let g:ale_echo_msg_format = '[%linter%] %s [%severity%] %code%'
  let g:ale_lint_on_text_changed = 'never'
  let g:ale_linters = {
        \ 'typescript': ['tslint', 'tsserver', 'typecheck'],
        \ 'javascript': ['eslint', 'flow']
        \}
  let g:ale_fixers = {
        \ 'javascript': ['prettier'],
        \ 'typescript': ['prettier'],
        \ 'html': ['prettier'],
        \ 'json': ['prettier'],
        \ 'mdx': ['prettier']
        \ }
  let g:ale_javascript_prettier_use_local_config = 1

  nnoremap <silent><Leader>f :ALEFix<CR>
endif

if s:has_plugin('fzf.vim')
  let g:fzf_action = {
        \ 'ctrl-t': 'tab split',
        \ 'ctrl-s': 'split',
        \ 'ctrl-v': 'vsplit',
        \}
endif

if s:has_plugin('LanguageClient-neovim')
  " Required for operations modifying multiple buffers like rename.
  set hidden

  let g:LanguageClient_useFloatingHover=1
  let g:LanguageClient_hoverPreview='Always'

  let g:LanguageClient_serverCommands = {
        \ 'javascript': ['tcp://127.0.0.1:2089'],
        \ 'javascriptreact': ['tcp://127.0.0.1:2089'],
        \ 'typescript': ['tcp://127.0.0.1:2089'],
        \ 'typescriptreact': ['tcp://127.0.0.1:2089'],
        \ }

  let g:LanguageClient_rootMarkers = {
        \ 'javascript': ['jsconfig.json'],
        \ }

  autocmd FileType * call LanguageClientMaps()
endif

if s:has_plugin('lightline.vim')
  set noshowmode
  let g:lightline = {
        \ 'mode_map': {
        \   'n': 'N',
        \   'i': 'I',
        \   'v': 'V'
        \ },
        \ 'colorscheme': 'gruvbox',
        \ 'active': {
        \   'left': [ [ 'mode', 'paste' ],
        \             [ 'fugitive', 'readonly' ], [ 'relativepath' ] ],
        \   'right': [ [ 'lineinfo' ],
        \              [ 'percent' ],
        \              [ 'tags' ] ]
        \ },
        \ 'component_function': {
        \   'fugitive': 'LightLineFugitive',
        \   'readonly': 'LightLineReadonly',
        \   'modified': 'LightLineModified',
        \   'fileformat': 'LightlineFileformat',
        \   'filetype': 'LightlineFiletype',
        \   'fileencoding': 'LightlineFileencoding'
        \ },
        \ 'component_expand': {
        \   'tags': 'LightlineTags'
        \ },
        \ 'separator': { 'left': '', 'right': '' },
        \ 'subseparator': { 'left': '', 'right': '' }
        \ }

  function! LightlineFileformat()
    return winwidth(0) > 70 ? &fileformat : ''
  endfunction

  function! LightlineFiletype()
    return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
  endfunction

  function! LightlineFileencoding()
    return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
  endfunction

  function! LightLineModified()
    if &filetype == "help"
      return ""
    elseif &modified
      return "+"
    elseif &modifiable
      return ""
    else
      return ""
    endif
  endfunction

  function! LightLineReadonly()
    if &filetype == "help"
      return ""
    elseif &readonly
      return "RO"
    else
      return ""
    endif
  endfunction

  function! LightLineFugitive()
    if exists("*fugitive#head")
      let _ = fugitive#head()
      return strlen(_) ? '┣ '._ : ''
    endif
    return ''
  endfunction

  function LightlineTags()
      " return '%{gutentags#statusline("[", "]")}'
  endfunction
endif

if s:has_plugin('neoterm')
  let g:neoterm_autoinsert = 1
endif

if s:has_plugin('nerdcommenter')
  let g:NERDSpaceDelims = 1
endif

if s:has_plugin('supertab')
  let g:SuperTabDefaultCompletionType = "<c-n>"
endif

if s:has_plugin('ultisnips')
  let g:UltiSnipsExpandTrigger='<c-j>'
  let g:UltiSnipsJumpForwardTrigger='<c-j>'
  let g:UltiSnipsJumpBackwardTrigger='<c-k>'
endif

if s:has_plugin('vim-fugitive')
  set diffopt+=vertical
  nmap <leader>gb :Gblame<cr>
  nmap <leader>gs :Gstatus<cr>
  nmap <leader>gc :Gcommit -v<cr>
  nmap <leader>ga :Git add -p<cr>
  nmap <leader>gm :Gcommit --amend<cr>
  nmap <leader>gp :Gpush<cr>
  nmap <leader>gd :Gdiff<cr>
  nmap <leader>gw :Gwrite<cr>
endif

if s:has_plugin('vim-polyglot')
  let g:javascript_plugin_jsdoc = 1
  let g:javascript_plugin_flow = 1
  " let g:javascript_conceal_function       = "ƒ"
  " let g:javascript_conceal_null           = "ø"
  " let g:javascript_conceal_this           = "@"
  " let g:javascript_conceal_return         = "⇚"
  " let g:javascript_conceal_undefined      = "¿"
  " let g:javascript_conceal_NaN            = "ℕ"
  " let g:javascript_conceal_prototype      = "¶"
  " let g:javascript_conceal_static         = "•"
  " let g:javascript_conceal_super          = "Ω"
  " let g:javascript_conceal_arrow_function = "⇒"
  " set conceallevel=2
endif

if s:has_plugin('vim-unimpaired')
  nmap ( [
  nmap ) ]
  omap ( [
  omap ) ]
  xmap ( [
  xmap ) ]
endif

if s:has_plugin('vimux')
  " Prompt for a command to run
  map <Leader>vp :VimuxPromptCommand<CR>
  " Run last command executed by VimuxRunCommand
  map <Leader>vl :VimuxRunLastCommand<CR>
  " Inspect runner pane
  map <Leader>vi :VimuxInspectRunner<CR>
  " Zoom the tmux runner pane
  map <Leader>vz :VimuxZoomRunner<CR>
endif

if s:has_plugin('winresizer')
  let g:winresizer_start_key = '<C-T>'
endif

if s:has_plugin('nord-vim')
  let g:nord_comment_brightness = 20
endif

if s:has_plugin('oceanic-next')
  let g:oceanic_next_terminal_bold = 1
  let g:oceanic_next_terminal_italic = 1
endif

if s:has_plugin('vim-closetag')
  autocmd BufNewFile,BufRead *.jsx set filetype=javascript
  let g:closetag_emptyTags_caseSensitive = 1
  let g:closetag_filetypes = 'html,xhtml,phtml,javascript'
endif

if s:has_plugin('vim-cutlass')
  nnoremap x d
  xnoremap x d
  nnoremap xx dd
  nnoremap X D
endif

if s:has_plugin('indentLine')
  let g:indentLine_setConceal = 0
endif

if s:has_plugin('vim-gutentags')
  let g:gutentags_ctags_tagfile = '.git/tags'
endif

if s:has_plugin('vim-subversive')
  nmap s <plug>(SubversiveSubstitute)
  nmap ss <plug>(SubversiveSubstituteLine)
  nmap S <plug>(SubversiveSubstituteToEndOfLine)
endif

if s:has_plugin('vim-yoink')
  let g:yoinkIncludeDeleteOperations = 1

  nmap <c-n> <plug>(YoinkPostPasteSwapBack)
  nmap <c-p> <plug>(YoinkPostPasteSwapForward)

  nmap p <plug>(YoinkPaste_p)
  nmap P <plug>(YoinkPaste_P)
endif

if s:has_plugin('gruvbox')
  let g:gruvbox_contrast_dark = 'soft'
  let g:gruvbox_contrast_light = 'soft'
  colorscheme gruvbox
endif

if s:has_plugin('nerdtree')
  " Disable display of '?' text and 'Bookmarks' label.
  let g:NERDTreeMinimalUI=1

  " Single-click to toggle directory nodes, double-click to open non-directory
  " nodes.
  let g:NERDTreeMouseMode=2

  let g:NERDTreeMapUpdir = '-'
endif
